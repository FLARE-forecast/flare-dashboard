{"title":"Western Virginia Water Authority","markdown":{"yaml":{"title":"Western Virginia Water Authority"},"headingText":"Most recent forecasts","containsRefs":false,"markdown":"\n\n```{r, include=FALSE}\nknitr::opts_chunk$set(echo = FALSE, message=FALSE, warning=FALSE)\n```\n\n```{r setup}\nlibrary(ggiraph)\nlibrary(patchwork)\nlibrary(tidyverse)\nlibrary(neon4cast)\nlibrary(score4cast)\n\n\nlibrary(thematic)\nthematic_rmd(bg=\"white\", fg=\"black\", accent=\"blue\")\n\nsource(\"R/flare-plots.R\")\nsource(\"R/ignore_sigpipes.R\")\n\n\n```\n\n```{r include=FALSE}\n\n```\n\n\nBelow are forecasts for three reservoirs managed by the Western Virginia Water Authority (WVWA). The WVWA is the primary supplier of drinking water to the Roanoke, VA region.\n\n::: panel-tabset\n## Falling Creek Reservoir\n\n```{r}\ns3_score <- arrow::s3_bucket(bucket = \"scores/parquet\", endpoint_override = \"s3.flare-forecast.org\", anonymous = TRUE)\ns3_forecast <- arrow::s3_bucket(bucket = \"forecasts/parquet\", endpoint_override = \"s3.flare-forecast.org\", anonymous = TRUE)\n  \nmost_recent <-  arrow::open_dataset(s3_score) |> \n  filter(site_id %in% c(\"fcre\")) |> \n  summarize(max = max(reference_datetime)) |> \n  collect() |> \n  pull()\n\ndf_insitu_scores <- arrow::open_dataset(s3_score) |> \n  filter(variable == \"temperature\",\n         # depth %in% c(0.5),\n         site_id %in% c(\"fcre\"),\n         reference_datetime == most_recent) |> \n  dplyr::collect()\n```\n\nThe most recent forecast is from `r lubridate::with_tz(lubridate::as_datetime(most_recent), tzone = \"America/New_York\")` (Eastern U.S. time).\n\n```{r fcre-temp}\ndf_insitu_scores_lake <- df_insitu_scores |> \n  filter(site_id == \"fcre\")\n\nplot_temp(df_insitu_scores_lake, depths = c(1,8)) \n```\n\n```{r fcre-depth, eval=F}\n# depth plot\ndepth_scores <- arrow::open_dataset(s3_score) |> \n  filter(variable == \"depth\",\n         site_id %in% c(\"fcre\"),\n         reference_datetime == most_recent) |> \n  dplyr::collect()\n\nplot_depth(depth_scores) \n```\n\n```{r fcre-mixing}\n# chance of being mixed\ntemperature_forecast <- arrow::open_dataset(s3_forecast, unify_schemas = FALSE) |> \n  filter(variable == \"temperature\",\n         site_id %in% c(\"fcre\"),\n         reference_datetime == most_recent,\n         !is.na(prediction)) |> \n  dplyr::collect() \n\nplot_mixing(forecast_df = temperature_forecast, eval_depths = c(1, 8), use_density = T, threshold = 0.1)\n\n```\n\n```{r fcre-ice}\n# Ice plot\nice_forecasts <- arrow::open_dataset(s3_forecast, unify_schemas = TRUE) |> \n  filter(variable == \"ice_thickness\",\n         site_id %in% c(\"fcre\"),\n         reference_datetime == most_recent) |> \n  dplyr::collect()\n\nplot_ice(ice_forecasts)\n```\n\n```{r eval = FALSE}\n\n#Past Performance\ndf <- arrow::open_dataset(s3_score) |> \n  filter(variable == \"temperature\",\n         depth %in% c(1.0),\n         site_id == \"fcre\") |> \n  dplyr::collect() \n\nbounds <- range(c(df$observation, df$mean), na.rm = TRUE)\n  \n  df |> \n  filter(horizon > 0) |> \n  ggplot(aes(x = observation, y = mean, color = factor(horizon))) +\n  geom_point() +\n  geom_abline(slope = 1, intercept = 0) +\n  ylim(bounds) +\n  xlim(bounds) +\n  labs(x = \"observed\", y = \"predicted\") +\n  theme_bw()\n\n```\n\n```{r eval = FALSE}\n#Compare forecasts\ns3_score <- arrow::s3_bucket(bucket = \"forecasts/parquet\", endpoint_override = \"s3.flare-forecast.org\", anonymous = TRUE)\n\nfull_forecast <- arrow::open_dataset(s3_score) |> \n  filter(site_id == \"fcre\") |> \n  distinct(reference_datetime) |> \n  collect() |> \n  filter(lubridate::as_date(reference_datetime) >= Sys.Date() - lubridate::days(16)) |> \n  summarize(min = min(reference_datetime)) |> \n  pull(min)\n\ndf_insitu_forecast <- arrow::open_dataset(s3_score) |> \n  filter(variable == \"temperature\",\n         depth == 1.0,\n         reference_datetime == full_forecast,\n         site_id == \"fcre\") |> \n  select(site_id, reference_datetime, datetime, family, parameter, variable, prediction) |> \n  dplyr::collect()  |> \n  mutate(reference_datetime = lubridate::as_datetime(reference_datetime),\n         datetime = lubridate::as_datetime(datetime))\n  \n\nnoaa_date <- as.character(lubridate::as_date(df_insitu_forecast$reference_datetime)[1])\ns3_score <- arrow::s3_bucket(bucket = \"drivers/noaa/gefs-v12/stage2/parquet/0\", endpoint_override = \"s3.flare-forecast.org\", anonymous = TRUE)\nnoaa_df <- arrow::open_dataset(s3_score, partitioning = \"reference_date\") |> \n  filter(variable == \"air_temperature\",\n         reference_date == noaa_date,\n         horizon <= 16 * 24, \n         site_id %in% c(\"fcre\")) |> \n  select(site_id, reference_datetime, datetime, family, parameter, variable, prediction) |> \n  dplyr::collect() |> \n  mutate(prediction = prediction - 273.15)\n\n  \n\ns3_score <- arrow::s3_bucket(bucket = \"drivers/inflow/fcre_v2/parquet\", endpoint_override = \"s3.flare-forecast.org\", anonymous = TRUE)\ninflow_df <- arrow::open_dataset(s3_score, partitioning = c(\"model_id\",\"site_id\",\"cycle\",\"reference_date\")) |> \n  filter(reference_date == noaa_date,\n         cycle == 0,\n         flow_type == \"inflow\",\n         variable %in% c(\"TEMP\")) |> \n  select(site_id, reference_datetime, datetime, family, parameter, variable, prediction) |> \n  collect() |> \n  mutate(reference_datetime = lubridate::as_datetime(reference_datetime),\n         datetime = lubridate::as_datetime(datetime),\n         variable = ifelse(variable == \"TEMP\",\"inflow_temperature\",variable))\n\ncombined <- bind_rows(df_insitu_forecast, noaa_df, inflow_df)\n```\n\n```{r eval = FALSE}\ninsitu_target_file <- \"https://s3.flare-forecast.org/targets/fcre_v2/fcre/fcre-targets-insitu.csv\"\nmet_targets_file <- \"https://s3.flare-forecast.org/targets/fcre_v2/fcre/observed-met_fcre.csv\"\ninflow_targets_file <- \"https://s3.flare-forecast.org/targets/fcre_v2/fcre/fcre-targets-inflow.csv\"\n\ninsitu_target <- readr::read_csv(insitu_target_file, show_col_types = FALSE) |>\n  filter(depth == 1.0) |> \n  #dplyr::mutate(site_id = paste0(site_id,\"-\",depth)) |> \n  select(-depth)\n\nmet_targets <- readr::read_csv(met_targets_file, show_col_types = FALSE) |> \n  filter(variable == \"air_temperature\") |> \n  mutate(observation = observation - 273.15)\n\n\ninflow_targets <- readr::read_csv(inflow_targets_file, show_col_types = FALSE) |> \n  filter(variable == \"TEMP\") |> \n  mutate(variable = ifelse(variable == \"TEMP\", \"inflow_temperature\", variable)) |> \n  mutate(datetime = lubridate::as_datetime(datetime))\n\ntarget <- bind_rows(insitu_target, met_targets, inflow_targets)\n\ndf2 <- combined %>%\n  score4cast::standardize_forecast() %>%\n  mutate(family = as.character(family)) |> \n  score4cast::crps_logs_score(target) %>%\n  mutate(horizon = datetime-lubridate::as_datetime(reference_datetime)) %>%\n  mutate(horizon = as.numeric(lubridate::as.duration(horizon),\n                              units = \"seconds\"),\n         horizon = horizon / 86400)  |> \n  mutate(variable = ifelse(variable == \"temperature\", \"lake_temperature\", variable))\n```\n\n```{r eval = FALSE}\n#Analyze weather, inflow, and lake forecasts\ndf2 |> \n  dplyr::filter(horizon > 0) |> \n  ggplot(aes(x = datetime)) +\n  geom_ribbon(aes(ymin = quantile10, ymax = quantile90), fill = \"lightblue\", color = \"lightblue\") +\n  #geom_line(aes(y = mean)) +\n  geom_point(aes(y = observation)) +\n  facet_wrap(~variable, scale = \"free\") +\n  labs(y = \"value\") +\n  theme_bw()\n\n```\n\n## Beaver Dam Reservoir\n\n```{r}\ns3_score <- arrow::s3_bucket(bucket = \"scores/parquet\", endpoint_override = \"s3.flare-forecast.org\", anonymous = TRUE)\ns3_forecast <- arrow::s3_bucket(bucket = \"forecasts/parquet\", endpoint_override = \"s3.flare-forecast.org\", anonymous = TRUE)\n  \nmost_recent <-  arrow::open_dataset(s3_score) |> \n  filter(site_id %in% c(\"bvre\")) |> \n  summarize(max = max(reference_datetime)) |> \n  collect() |> \n  pull()\n\ndf_insitu_scores <- arrow::open_dataset(s3_score) |> \n  filter(variable == \"temperature\",\n         # depth %in% c(0.5),\n         site_id %in% c(\"bvre\"),\n         reference_datetime == most_recent) |> \n  dplyr::collect()\n```\n\nThe most recent forecast is from `r lubridate::with_tz(lubridate::as_datetime(most_recent), tzone = \"America/New_York\")` (Eastern U.S. time).\n\n```{r}\n\ndf_insitu_scores_lake <- df_insitu_scores |> \n  filter(site_id == \"bvre\")\n\nplot_temp(df_insitu_scores_lake, depths = c(1,8))  \n```\n\n```{r bvre-depth, eval=F}\n# depth plot\ndepth_scores <- arrow::open_dataset(s3_score) |> \n  filter(variable == \"depth\",\n         site_id %in% c(\"bvre\"),\n         reference_datetime == most_recent) |> \n  dplyr::collect()\n\nplot_depth(depth_scores) \n```\n\n```{r bvre-mixing}\n# chance of being mixed\ntemperature_forecast <- arrow::open_dataset(s3_forecast) |> \n  filter(variable == \"temperature\",\n         site_id %in% c(\"bvre\"),\n         reference_datetime == most_recent,\n         !is.na(prediction)) |> \n  dplyr::collect() \n\nplot_mixing(forecast_df = temperature_forecast, eval_depths = c(1, 8), use_density = T, threshold = 0.1)\n\n```\n\n```{r bvre-ice}\n# Ice plot\nice_forecasts <- arrow::open_dataset(s3_forecast) |> \n  filter(variable == \"ice_thickness\",\n         site_id %in% c(\"bvre\"),\n         reference_datetime == most_recent) |> \n  dplyr::collect()\n\nplot_ice(ice_forecasts)\n```\n\n```{r eval = FALSE}\ndf <- arrow::open_dataset(s3) |> \n  filter(variable == \"temperature\",\n         depth %in% c(1.0),\n         site_id == \"bvre\") |> \n  dplyr::collect() \n\nbounds <- range(c(df$observation, df$mean), na.rm = TRUE)\n  \n  df |> \n  filter(horizon > 0) |> \n  ggplot(aes(x = observation, y = mean, color = factor(horizon))) +\n  geom_point() +\n  geom_abline(slope = 1, intercept = 0) +\n  ylim(bounds) +\n  xlim(bounds) +\n  labs(x = \"observed\", y = \"predicted\") +\n  theme_bw()\n```\n\n## Carvins Cove Reservoir\n\n```{r}\ns3_score <- arrow::s3_bucket(bucket = \"scores/parquet\", endpoint_override = \"s3.flare-forecast.org\", anonymous = TRUE)\ns3_forecast <- arrow::s3_bucket(bucket = \"forecasts/parquet\", endpoint_override = \"s3.flare-forecast.org\", anonymous = TRUE)\n  \nmost_recent <-  arrow::open_dataset(s3_score) |> \n  filter(site_id %in% c(\"ccre\")) |> \n  summarize(max = max(reference_datetime)) |> \n  collect() |> \n  pull()\n\ndf_insitu_scores <- arrow::open_dataset(s3_score) |> \n  filter(variable == \"temperature\",\n         # depth %in% c(0.5),\n         site_id %in% c(\"ccre\"),\n         reference_datetime == most_recent) |> \n  dplyr::collect()\n```\n\nThe most recent forecast is from `r lubridate::with_tz(lubridate::as_datetime(most_recent), tzone = \"America/New_York\")` (Eastern U.S. time).\n\n```{r}\n\ndf_insitu_scores_lake <- df_insitu_scores |> \n  filter(site_id == \"ccre\")\n\nplot_temp(df_insitu_scores_lake, depths = c(1,8))  \n```\n\n```{r ccre-depth, eval=F}\n# depth plot\ndepth_scores <- arrow::open_dataset(s3_score) |> \n  filter(variable == \"depth\",\n         site_id %in% c(\"ccre\"),\n         reference_datetime == most_recent) |> \n  dplyr::collect()\n\nplot_depth(depth_scores) \n```\n\n```{r ccre-mixing}\n# chance of being mixed\ntemperature_forecast <- arrow::open_dataset(s3_forecast) |> \n  filter(variable == \"temperature\",\n         site_id %in% c(\"ccre\"),\n         reference_datetime == most_recent,\n         !is.na(prediction)) |> \n  dplyr::collect() \n\nplot_mixing(forecast_df = temperature_forecast, eval_depths = c(1, 8), use_density = T, threshold = 0.1)\n\n```\n\n```{r ccre-ice}\n# Ice plot\nice_forecasts <- arrow::open_dataset(s3_forecast) |> \n  filter(variable == \"ice_thickness\",\n         site_id %in% c(\"ccre\"),\n         reference_datetime == most_recent,\n         !is.na(prediction)) |> \n  dplyr::collect() \n\nplot_ice(ice_forecasts)\n```\n\n```{r eval = FALSE}\ndf <- arrow::open_dataset(s3) |> \n  filter(variable == \"temperature\",\n         depth %in% c(1.0),\n         site_id == \"ccre\") |> \n  dplyr::collect() \n\nbounds <- range(c(df$observation, df$mean), na.rm = TRUE)\n  \n  df |> \n  filter(horizon > 0) |> \n  ggplot(aes(x = observation, y = mean, color = factor(horizon))) +\n  geom_point() +\n  geom_abline(slope = 1, intercept = 0) +\n  ylim(bounds) +\n  xlim(bounds) +\n  labs(x = \"observed\", y = \"predicted\") +\n  theme_bw()\n```\n:::\n","srcMarkdownNoYaml":"\n\n```{r, include=FALSE}\nknitr::opts_chunk$set(echo = FALSE, message=FALSE, warning=FALSE)\n```\n\n```{r setup}\nlibrary(ggiraph)\nlibrary(patchwork)\nlibrary(tidyverse)\nlibrary(neon4cast)\nlibrary(score4cast)\n\n\nlibrary(thematic)\nthematic_rmd(bg=\"white\", fg=\"black\", accent=\"blue\")\n\nsource(\"R/flare-plots.R\")\nsource(\"R/ignore_sigpipes.R\")\n\n\n```\n\n```{r include=FALSE}\n\n```\n\n## Most recent forecasts\n\nBelow are forecasts for three reservoirs managed by the Western Virginia Water Authority (WVWA). The WVWA is the primary supplier of drinking water to the Roanoke, VA region.\n\n::: panel-tabset\n## Falling Creek Reservoir\n\n```{r}\ns3_score <- arrow::s3_bucket(bucket = \"scores/parquet\", endpoint_override = \"s3.flare-forecast.org\", anonymous = TRUE)\ns3_forecast <- arrow::s3_bucket(bucket = \"forecasts/parquet\", endpoint_override = \"s3.flare-forecast.org\", anonymous = TRUE)\n  \nmost_recent <-  arrow::open_dataset(s3_score) |> \n  filter(site_id %in% c(\"fcre\")) |> \n  summarize(max = max(reference_datetime)) |> \n  collect() |> \n  pull()\n\ndf_insitu_scores <- arrow::open_dataset(s3_score) |> \n  filter(variable == \"temperature\",\n         # depth %in% c(0.5),\n         site_id %in% c(\"fcre\"),\n         reference_datetime == most_recent) |> \n  dplyr::collect()\n```\n\nThe most recent forecast is from `r lubridate::with_tz(lubridate::as_datetime(most_recent), tzone = \"America/New_York\")` (Eastern U.S. time).\n\n```{r fcre-temp}\ndf_insitu_scores_lake <- df_insitu_scores |> \n  filter(site_id == \"fcre\")\n\nplot_temp(df_insitu_scores_lake, depths = c(1,8)) \n```\n\n```{r fcre-depth, eval=F}\n# depth plot\ndepth_scores <- arrow::open_dataset(s3_score) |> \n  filter(variable == \"depth\",\n         site_id %in% c(\"fcre\"),\n         reference_datetime == most_recent) |> \n  dplyr::collect()\n\nplot_depth(depth_scores) \n```\n\n```{r fcre-mixing}\n# chance of being mixed\ntemperature_forecast <- arrow::open_dataset(s3_forecast, unify_schemas = FALSE) |> \n  filter(variable == \"temperature\",\n         site_id %in% c(\"fcre\"),\n         reference_datetime == most_recent,\n         !is.na(prediction)) |> \n  dplyr::collect() \n\nplot_mixing(forecast_df = temperature_forecast, eval_depths = c(1, 8), use_density = T, threshold = 0.1)\n\n```\n\n```{r fcre-ice}\n# Ice plot\nice_forecasts <- arrow::open_dataset(s3_forecast, unify_schemas = TRUE) |> \n  filter(variable == \"ice_thickness\",\n         site_id %in% c(\"fcre\"),\n         reference_datetime == most_recent) |> \n  dplyr::collect()\n\nplot_ice(ice_forecasts)\n```\n\n```{r eval = FALSE}\n\n#Past Performance\ndf <- arrow::open_dataset(s3_score) |> \n  filter(variable == \"temperature\",\n         depth %in% c(1.0),\n         site_id == \"fcre\") |> \n  dplyr::collect() \n\nbounds <- range(c(df$observation, df$mean), na.rm = TRUE)\n  \n  df |> \n  filter(horizon > 0) |> \n  ggplot(aes(x = observation, y = mean, color = factor(horizon))) +\n  geom_point() +\n  geom_abline(slope = 1, intercept = 0) +\n  ylim(bounds) +\n  xlim(bounds) +\n  labs(x = \"observed\", y = \"predicted\") +\n  theme_bw()\n\n```\n\n```{r eval = FALSE}\n#Compare forecasts\ns3_score <- arrow::s3_bucket(bucket = \"forecasts/parquet\", endpoint_override = \"s3.flare-forecast.org\", anonymous = TRUE)\n\nfull_forecast <- arrow::open_dataset(s3_score) |> \n  filter(site_id == \"fcre\") |> \n  distinct(reference_datetime) |> \n  collect() |> \n  filter(lubridate::as_date(reference_datetime) >= Sys.Date() - lubridate::days(16)) |> \n  summarize(min = min(reference_datetime)) |> \n  pull(min)\n\ndf_insitu_forecast <- arrow::open_dataset(s3_score) |> \n  filter(variable == \"temperature\",\n         depth == 1.0,\n         reference_datetime == full_forecast,\n         site_id == \"fcre\") |> \n  select(site_id, reference_datetime, datetime, family, parameter, variable, prediction) |> \n  dplyr::collect()  |> \n  mutate(reference_datetime = lubridate::as_datetime(reference_datetime),\n         datetime = lubridate::as_datetime(datetime))\n  \n\nnoaa_date <- as.character(lubridate::as_date(df_insitu_forecast$reference_datetime)[1])\ns3_score <- arrow::s3_bucket(bucket = \"drivers/noaa/gefs-v12/stage2/parquet/0\", endpoint_override = \"s3.flare-forecast.org\", anonymous = TRUE)\nnoaa_df <- arrow::open_dataset(s3_score, partitioning = \"reference_date\") |> \n  filter(variable == \"air_temperature\",\n         reference_date == noaa_date,\n         horizon <= 16 * 24, \n         site_id %in% c(\"fcre\")) |> \n  select(site_id, reference_datetime, datetime, family, parameter, variable, prediction) |> \n  dplyr::collect() |> \n  mutate(prediction = prediction - 273.15)\n\n  \n\ns3_score <- arrow::s3_bucket(bucket = \"drivers/inflow/fcre_v2/parquet\", endpoint_override = \"s3.flare-forecast.org\", anonymous = TRUE)\ninflow_df <- arrow::open_dataset(s3_score, partitioning = c(\"model_id\",\"site_id\",\"cycle\",\"reference_date\")) |> \n  filter(reference_date == noaa_date,\n         cycle == 0,\n         flow_type == \"inflow\",\n         variable %in% c(\"TEMP\")) |> \n  select(site_id, reference_datetime, datetime, family, parameter, variable, prediction) |> \n  collect() |> \n  mutate(reference_datetime = lubridate::as_datetime(reference_datetime),\n         datetime = lubridate::as_datetime(datetime),\n         variable = ifelse(variable == \"TEMP\",\"inflow_temperature\",variable))\n\ncombined <- bind_rows(df_insitu_forecast, noaa_df, inflow_df)\n```\n\n```{r eval = FALSE}\ninsitu_target_file <- \"https://s3.flare-forecast.org/targets/fcre_v2/fcre/fcre-targets-insitu.csv\"\nmet_targets_file <- \"https://s3.flare-forecast.org/targets/fcre_v2/fcre/observed-met_fcre.csv\"\ninflow_targets_file <- \"https://s3.flare-forecast.org/targets/fcre_v2/fcre/fcre-targets-inflow.csv\"\n\ninsitu_target <- readr::read_csv(insitu_target_file, show_col_types = FALSE) |>\n  filter(depth == 1.0) |> \n  #dplyr::mutate(site_id = paste0(site_id,\"-\",depth)) |> \n  select(-depth)\n\nmet_targets <- readr::read_csv(met_targets_file, show_col_types = FALSE) |> \n  filter(variable == \"air_temperature\") |> \n  mutate(observation = observation - 273.15)\n\n\ninflow_targets <- readr::read_csv(inflow_targets_file, show_col_types = FALSE) |> \n  filter(variable == \"TEMP\") |> \n  mutate(variable = ifelse(variable == \"TEMP\", \"inflow_temperature\", variable)) |> \n  mutate(datetime = lubridate::as_datetime(datetime))\n\ntarget <- bind_rows(insitu_target, met_targets, inflow_targets)\n\ndf2 <- combined %>%\n  score4cast::standardize_forecast() %>%\n  mutate(family = as.character(family)) |> \n  score4cast::crps_logs_score(target) %>%\n  mutate(horizon = datetime-lubridate::as_datetime(reference_datetime)) %>%\n  mutate(horizon = as.numeric(lubridate::as.duration(horizon),\n                              units = \"seconds\"),\n         horizon = horizon / 86400)  |> \n  mutate(variable = ifelse(variable == \"temperature\", \"lake_temperature\", variable))\n```\n\n```{r eval = FALSE}\n#Analyze weather, inflow, and lake forecasts\ndf2 |> \n  dplyr::filter(horizon > 0) |> \n  ggplot(aes(x = datetime)) +\n  geom_ribbon(aes(ymin = quantile10, ymax = quantile90), fill = \"lightblue\", color = \"lightblue\") +\n  #geom_line(aes(y = mean)) +\n  geom_point(aes(y = observation)) +\n  facet_wrap(~variable, scale = \"free\") +\n  labs(y = \"value\") +\n  theme_bw()\n\n```\n\n## Beaver Dam Reservoir\n\n```{r}\ns3_score <- arrow::s3_bucket(bucket = \"scores/parquet\", endpoint_override = \"s3.flare-forecast.org\", anonymous = TRUE)\ns3_forecast <- arrow::s3_bucket(bucket = \"forecasts/parquet\", endpoint_override = \"s3.flare-forecast.org\", anonymous = TRUE)\n  \nmost_recent <-  arrow::open_dataset(s3_score) |> \n  filter(site_id %in% c(\"bvre\")) |> \n  summarize(max = max(reference_datetime)) |> \n  collect() |> \n  pull()\n\ndf_insitu_scores <- arrow::open_dataset(s3_score) |> \n  filter(variable == \"temperature\",\n         # depth %in% c(0.5),\n         site_id %in% c(\"bvre\"),\n         reference_datetime == most_recent) |> \n  dplyr::collect()\n```\n\nThe most recent forecast is from `r lubridate::with_tz(lubridate::as_datetime(most_recent), tzone = \"America/New_York\")` (Eastern U.S. time).\n\n```{r}\n\ndf_insitu_scores_lake <- df_insitu_scores |> \n  filter(site_id == \"bvre\")\n\nplot_temp(df_insitu_scores_lake, depths = c(1,8))  \n```\n\n```{r bvre-depth, eval=F}\n# depth plot\ndepth_scores <- arrow::open_dataset(s3_score) |> \n  filter(variable == \"depth\",\n         site_id %in% c(\"bvre\"),\n         reference_datetime == most_recent) |> \n  dplyr::collect()\n\nplot_depth(depth_scores) \n```\n\n```{r bvre-mixing}\n# chance of being mixed\ntemperature_forecast <- arrow::open_dataset(s3_forecast) |> \n  filter(variable == \"temperature\",\n         site_id %in% c(\"bvre\"),\n         reference_datetime == most_recent,\n         !is.na(prediction)) |> \n  dplyr::collect() \n\nplot_mixing(forecast_df = temperature_forecast, eval_depths = c(1, 8), use_density = T, threshold = 0.1)\n\n```\n\n```{r bvre-ice}\n# Ice plot\nice_forecasts <- arrow::open_dataset(s3_forecast) |> \n  filter(variable == \"ice_thickness\",\n         site_id %in% c(\"bvre\"),\n         reference_datetime == most_recent) |> \n  dplyr::collect()\n\nplot_ice(ice_forecasts)\n```\n\n```{r eval = FALSE}\ndf <- arrow::open_dataset(s3) |> \n  filter(variable == \"temperature\",\n         depth %in% c(1.0),\n         site_id == \"bvre\") |> \n  dplyr::collect() \n\nbounds <- range(c(df$observation, df$mean), na.rm = TRUE)\n  \n  df |> \n  filter(horizon > 0) |> \n  ggplot(aes(x = observation, y = mean, color = factor(horizon))) +\n  geom_point() +\n  geom_abline(slope = 1, intercept = 0) +\n  ylim(bounds) +\n  xlim(bounds) +\n  labs(x = \"observed\", y = \"predicted\") +\n  theme_bw()\n```\n\n## Carvins Cove Reservoir\n\n```{r}\ns3_score <- arrow::s3_bucket(bucket = \"scores/parquet\", endpoint_override = \"s3.flare-forecast.org\", anonymous = TRUE)\ns3_forecast <- arrow::s3_bucket(bucket = \"forecasts/parquet\", endpoint_override = \"s3.flare-forecast.org\", anonymous = TRUE)\n  \nmost_recent <-  arrow::open_dataset(s3_score) |> \n  filter(site_id %in% c(\"ccre\")) |> \n  summarize(max = max(reference_datetime)) |> \n  collect() |> \n  pull()\n\ndf_insitu_scores <- arrow::open_dataset(s3_score) |> \n  filter(variable == \"temperature\",\n         # depth %in% c(0.5),\n         site_id %in% c(\"ccre\"),\n         reference_datetime == most_recent) |> \n  dplyr::collect()\n```\n\nThe most recent forecast is from `r lubridate::with_tz(lubridate::as_datetime(most_recent), tzone = \"America/New_York\")` (Eastern U.S. time).\n\n```{r}\n\ndf_insitu_scores_lake <- df_insitu_scores |> \n  filter(site_id == \"ccre\")\n\nplot_temp(df_insitu_scores_lake, depths = c(1,8))  \n```\n\n```{r ccre-depth, eval=F}\n# depth plot\ndepth_scores <- arrow::open_dataset(s3_score) |> \n  filter(variable == \"depth\",\n         site_id %in% c(\"ccre\"),\n         reference_datetime == most_recent) |> \n  dplyr::collect()\n\nplot_depth(depth_scores) \n```\n\n```{r ccre-mixing}\n# chance of being mixed\ntemperature_forecast <- arrow::open_dataset(s3_forecast) |> \n  filter(variable == \"temperature\",\n         site_id %in% c(\"ccre\"),\n         reference_datetime == most_recent,\n         !is.na(prediction)) |> \n  dplyr::collect() \n\nplot_mixing(forecast_df = temperature_forecast, eval_depths = c(1, 8), use_density = T, threshold = 0.1)\n\n```\n\n```{r ccre-ice}\n# Ice plot\nice_forecasts <- arrow::open_dataset(s3_forecast) |> \n  filter(variable == \"ice_thickness\",\n         site_id %in% c(\"ccre\"),\n         reference_datetime == most_recent,\n         !is.na(prediction)) |> \n  dplyr::collect() \n\nplot_ice(ice_forecasts)\n```\n\n```{r eval = FALSE}\ndf <- arrow::open_dataset(s3) |> \n  filter(variable == \"temperature\",\n         depth %in% c(1.0),\n         site_id == \"ccre\") |> \n  dplyr::collect() \n\nbounds <- range(c(df$observation, df$mean), na.rm = TRUE)\n  \n  df |> \n  filter(horizon > 0) |> \n  ggplot(aes(x = observation, y = mean, color = factor(horizon))) +\n  geom_point() +\n  geom_abline(slope = 1, intercept = 0) +\n  ylim(bounds) +\n  xlim(bounds) +\n  labs(x = \"observed\", y = \"predicted\") +\n  theme_bw()\n```\n:::\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"fcre.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Archive","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.146","editor":"visual","theme":["yeti","custom.scss"],"title-block-style":"default","title-block-banner":"img/carvins_justwater.png","page-layout":"full","title":"Western Virginia Water Authority"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}